name: Java and AWS CICD
on:
  push:
    branches: [ "main" ]

permissions:
  id-token: write  # OIDC를 통한 AWS 접근 권한 부여
  contents: read   # 레포지토리 읽기 권한

env:
  AWS_REGION: ap-northeast-2       # AWS 리전
  ECR_REPOSITORY: public-cloud     # ECR 리포지토리 이름
  AWS_ACCOUNT_ID: 615299736609     # AWS 계정 ID

jobs:
  build-and-deploy-to-ecr:
    runs-on: ubuntu-latest

    steps:
      # 1. 소스 코드 가져오기
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. JDK 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Spring Boot 애플리케이션 빌드
      - name: Build with Gradle
        run: ./gradlew clean build

      # 4. AWS 자격 증명 구성
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/public-cloud  # IAM 역할 ARN
          aws-region: ${{ env.AWS_REGION }}

      # 5. Amazon ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 6. Docker 이미지 빌드 및 ECR 푸시
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          IMAGE_TAG: ${{ github.sha }}  # GitHub SHA를 태그로 사용
        run: |
          # Docker 이미지 빌드
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
          
          # ECR에 태그된 이미지 푸시
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          
          # 푸시된 이미지 정보 출력
          echo "Image pushed to: $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG"